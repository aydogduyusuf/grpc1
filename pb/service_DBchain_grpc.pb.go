// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service_DBchain.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Grpc1Client is the client API for Grpc1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Grpc1Client interface {
	DeployToken(ctx context.Context, in *DeployTokenRequest, opts ...grpc.CallOption) (*DeployTokenResponse, error)
	TransferToken(ctx context.Context, in *TransferTokenRequest, opts ...grpc.CallOption) (*TransferTokenResponse, error)
}

type grpc1Client struct {
	cc grpc.ClientConnInterface
}

func NewGrpc1Client(cc grpc.ClientConnInterface) Grpc1Client {
	return &grpc1Client{cc}
}

func (c *grpc1Client) DeployToken(ctx context.Context, in *DeployTokenRequest, opts ...grpc.CallOption) (*DeployTokenResponse, error) {
	out := new(DeployTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.grpc1/DeployToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpc1Client) TransferToken(ctx context.Context, in *TransferTokenRequest, opts ...grpc.CallOption) (*TransferTokenResponse, error) {
	out := new(TransferTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.grpc1/TransferToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Grpc1Server is the server API for Grpc1 service.
// All implementations must embed UnimplementedGrpc1Server
// for forward compatibility
type Grpc1Server interface {
	DeployToken(context.Context, *DeployTokenRequest) (*DeployTokenResponse, error)
	TransferToken(context.Context, *TransferTokenRequest) (*TransferTokenResponse, error)
	mustEmbedUnimplementedGrpc1Server()
}

// UnimplementedGrpc1Server must be embedded to have forward compatible implementations.
type UnimplementedGrpc1Server struct {
}

func (UnimplementedGrpc1Server) DeployToken(context.Context, *DeployTokenRequest) (*DeployTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployToken not implemented")
}
func (UnimplementedGrpc1Server) TransferToken(context.Context, *TransferTokenRequest) (*TransferTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToken not implemented")
}
func (UnimplementedGrpc1Server) mustEmbedUnimplementedGrpc1Server() {}

// UnsafeGrpc1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Grpc1Server will
// result in compilation errors.
type UnsafeGrpc1Server interface {
	mustEmbedUnimplementedGrpc1Server()
}

func RegisterGrpc1Server(s grpc.ServiceRegistrar, srv Grpc1Server) {
	s.RegisterService(&Grpc1_ServiceDesc, srv)
}

func _Grpc1_DeployToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc1Server).DeployToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.grpc1/DeployToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc1Server).DeployToken(ctx, req.(*DeployTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc1_TransferToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grpc1Server).TransferToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.grpc1/TransferToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grpc1Server).TransferToken(ctx, req.(*TransferTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpc1_ServiceDesc is the grpc.ServiceDesc for Grpc1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpc1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.grpc1",
	HandlerType: (*Grpc1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployToken",
			Handler:    _Grpc1_DeployToken_Handler,
		},
		{
			MethodName: "TransferToken",
			Handler:    _Grpc1_TransferToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_DBchain.proto",
}
